"b[temp2 sp:4]",
"b[temp3 sp:4]",
"b[origin:strat sp:4]",
"b[origin:temp1 sp:4]",
"b[origin:temp2 sp:4]",
"b[origin:temp3 sp:4]",
"b[strat:temp1 sp:4]",
"b[strat:temp2 sp:4]",
"b[strat:temp3 sp:4]",
"b[origin:strat:temp1 sp:4]",
"b[origin:strat:temp2 sp:4]",
"b[origin:strat:temp3 sp:4]"
,
"b[origin sp:5]",
"b[strat sp:5]",
"b[temp1 sp:5]",
"b[temp2 sp:5]",
"b[temp3 sp:5]",
"b[origin:strat sp:5]",
"b[origin:temp1 sp:5]",
"b[origin:temp2 sp:5]",
"b[origin:temp3 sp:5]",
"b[strat:temp1 sp:5]",
"b[strat:temp2 sp:5]",
"b[strat:temp3 sp:5]",
"b[origin:strat:temp1 sp:5]",
"b[origin:strat:temp2 sp:5]",
"b[origin:strat:temp3 sp:5]"
,
"b[origin sp:6]",
"b[strat sp:6]",
"b[temp1 sp:6]",
"b[temp2 sp:6]",
"b[temp3 sp:6]",
"b[origin:strat sp:6]",
"b[origin:temp1 sp:6]",
"b[origin:temp2 sp:6]",
"b[origin:temp3 sp:6]",
"b[strat:temp1 sp:6]",
"b[strat:temp2 sp:6]",
"b[strat:temp3 sp:6]",
"b[origin:strat:temp1 sp:6]",
"b[origin:strat:temp2 sp:6]",
"b[origin:strat:temp3 sp:6]"
,
"b[origin sp:7]",
"b[strat sp:7]",
"b[temp1 sp:7]",
"b[temp2 sp:7]",
"b[temp3 sp:7]",
"b[origin:strat sp:7]",
"b[origin:temp1 sp:7]",
"b[origin:temp2 sp:7]",
"b[origin:temp3 sp:7]",
"b[strat:temp1 sp:7]",
"b[strat:temp2 sp:7]",
"b[strat:temp3 sp:7]",
"b[origin:strat:temp1 sp:7]",
"b[origin:strat:temp2 sp:7]",
"b[origin:strat:temp3 sp:7]"
)
)
cri.f<-sum.m[c(2:121),c(1,4,5)] #just selecting the mean and 95% CI. Removing the intercept
fdf<-data.frame(cri.f)
#binding
fdf2<-as.data.frame(
cbind(
(c(rownames(fdf)[1:15], rep(rev(rownames(fdf)[1:15]), each=7))), #stdarzing the parameter  names
as.numeric(as.character(fdf$mean)),  # the estimate
as.numeric(as.character(fdf$X2.5.)), #lower bound, 95% CI
as.numeric(as.character(fdf$X97.5.)),  #upper bound, 95% CI
as.numeric(c(rep(1, 15), rep(2, 105))),  # A variable to signify if the corresponding row is a fixed  or random effect. 1=global, 2=rndm
as.numeric( c(rep(0,15), rep(seq(1,7),15 ))))) #sp variable. Zero when a factor
names(fdf2)<-c("var", "Estimate", colnames(cri.f)[c(2,3)], "rndm", "sp") #renaming.
fdf2$Estimate<-as.numeric(fdf2$Estimate)
fdf2$`2.5%`<-as.numeric(fdf2$`2.5%`)
fdf2$`97.5%`<-as.numeric(fdf2$`97.5%`)
#Fixed effect estimates:
fixed<-c(rep(0, 15), rep(as.numeric(rev(fdf2[c(1:15),2])), each=7))
dff<-fdf2
#adding the fixef estiamtes to the random effect values:
dff$Estimate<-fdf2$Estimate+fixed
dff$`2.5%`<-fdf2$`2.5%`+fixed
dff$`97.5%`<-fdf2$`97.5%`+fixed
dff$var <- fct_inorder(dff$var)# %>% fct_rev() # so that the categorical variables plot in the right order
dff$rndm <- fct_rev(dff$rndm)
dff$sp <- factor(dff$sp, levels=c(0,1:3,4:7))
dff<-dff[c(16:120, 1:15),] # so that the main effects plot on top
pd <- position_dodge(width =  0.5)
var_names <-c("origin","strat","temp1" ,"temp2","temp3","origin × strat","origin × temp1","origin × temp2","origin × temp3",
"strat × temp1", "strat × temp2","strat × temp3","origin × strat × temp1", "origin × strat × temp2",
"origin × strat × temp3")
fig<-
ggplot(dff, aes(y=Estimate, x=var, color=(sp),alpha=rndm, size=factor(rndm))) + # , alpha=factor(r,ndm)))+
geom_errorbar(aes(ymin=(`2.5%`), ymax=(`97.5%`)), position=pd, size=.8, width =0)+
geom_point(position=pd)+
#geom_point(data = subset(dff, rndm == 1), position=pd)+
geom_hline(yintercept=0)+
scale_colour_manual(labels = c("Global mean", expression(italic("Capsella bursa-pastoris")),
expression(italic("Chelidonium majus")), expression(italic("Dactylis glomerata")),
expression(italic("Plantago lanceolata")), expression(italic("Plantago major")),
expression(italic("Rumex crispus")),expression(italic("Taraxacum officinale"))),
values=c("black",getPalette(7)))+
scale_size_discrete(range=c(4,6))+
scale_alpha_discrete(range=c(.5,1))+ #(values=c(rep(0.2,7), 1))+
guides(alpha=FALSE, size=FALSE) + #removes the legend
ggtitle(label = paste(title))+
labs(x="", y=paste(units))+
scale_x_discrete(labels = var_names) + # rev(unique(sort(dff$var))))+
theme_bw(12)+
theme(axis.text.x = element_text(angle = 60, hjust=1, vjust=.9))+
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))+
theme(legend.title = element_blank())+
if(legend==FALSE){
guides(color=FALSE) }
#pdf(file.path(figpath, "Fig2.pdf"), width = 7, height = 8)
modfig <<- fig
}
### Loading models:
load("/home/harold/Dropbox/gitfiles/germ/mod_time_pois.rdata") #this is my rstanarm  stanfit object.
load("/home/harold/Dropbox/gitfiles/germ/mod_rate.rdata") #this nd the next models are  rstanarm stanfit objects
load("/home/harold/Dropbox/gitfiles/germ/mod_gr.rdata")
# running function:
fig1<-modplot(model=mod_time_pois, "b) Germination timing", "log(days)", legend=FALSE)
fig1
fig1<-  fig1+ theme(axis.text.x = element_blank())
fig2<-modplot(model=mod_rate, "a) Germination rate", "logit(fraction)", legend=TRUE) + theme(axis.text.x = element_blank())
fig3 <- modplot(model=mod_gr, "c) Growth rate", "cm/day", legend=FALSE)
## Putting them all together:
fig2n<-fig2 + theme(legend.position ="none")
grid<-plot_grid(fig2n, fig1, fig3, nrow=3, rel_heights = c(1,1,1.4))
#extract legend
legend <- get_legend(
# create some space to the left of the legend
#  fig2+ guides(color = guide_legend(nrow = 1)) +
#   theme(legend.position = "bottom")
fig2 + theme(legend.box.margin = margin(12, 0, 0, 12))
)
final  <- plot_grid(grid, legend, ncol=2, rel_widths = c(3,.8), axis='t', align="h")
ggsave("germ_figs_onepage.svg",final, device = "svg",width = 10,height=11, units="in")
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
##libraries
library(rstan)
library(lme4)
library(ggplot2)
library(rstanarm)
library(tidyr)
library(RCurl)
library(forcats)
library(RColorBrewer)
source("multiplot.r") #http://peterhaschke.com/Code/multiplot.R") #so that the multiplot function works
source("position.r") #https://raw.githubusercontent.com/jaredlander/coefplot/master/R/position.r") # for vertical dodging
### Loading models:
load("/home/harold/Dropbox/gitfiles/germ/mod_time_pois.rdata") #this is my rstanarm  stanfit object.
load("/home/harold/Dropbox/gitfiles/germ/mod_rate.rdata") #this nd the next models are  rstanarm stanfit objects
load("/home/harold/Dropbox/gitfiles/germ/mod_gr.rdata")
#model:
m<-mod_rate
# model data:
load("/home/harold/github/germination_stan/rate_data.rdata")
data<-rate_data
## PLALAN is species 4,
# locations for PLALAN:
locs<-data[data$sp==4 ,"loc"] %>% unique() %>% sort()
# location index:
load("/home/harold/github/germination_stan/germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs, germinated==1 & sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
loc<-as.numeric(as.factor(germs.y$loc))
loc_index <- cbind(germs.y$loc, loc) %>% as.data.frame() %>% unique()
pars_append<-list()
for (i in locs){
pars <- c(paste("b[origin loc:sp:",i,":4]", sep=""),
paste("b[strat loc:sp:",i,":4]", sep=""),
paste("b[temp1 loc:sp:",i,":4]", sep=""),
paste("b[temp2 loc:sp:",i,":4]", sep=""),
paste("b[temp3 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat loc:sp:",i,":4]", sep=""),
paste("b[origin:temp1 loc:sp:",i,":4]", sep=""),
paste("b[origin:temp2 loc:sp:",i,":4]", sep=""),
paste("b[origin:temp3 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp1 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp2 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp3 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp1 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp2 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp3 loc:sp:",i,":4]", sep="")
)
pars_append<-(c(pars_append,pars))
}
sum.m <-
summary(probs=c(0.025,0.975),
m,
pars = c(
"b[origin sp:4]",
"b[strat sp:4]",
"b[temp1 sp:4]",
"b[temp2 sp:4]",
"b[temp3 sp:4]",
"b[origin:strat sp:4]",
"b[origin:temp1 sp:4]",
"b[origin:temp2 sp:4]",
"b[origin:temp3 sp:4]",
"b[strat:temp1 sp:4]",
"b[strat:temp2 sp:4]",
"b[strat:temp3 sp:4]",
"b[origin:strat:temp1 sp:4]",
"b[origin:strat:temp2 sp:4]",
"b[origin:strat:temp3 sp:4]"
,
pars_append
)
)
cri.f<-sum.m[,c(1,4,5)] #just selecting the mean and 95% CI.
cri.f_reorder<-cri.f[c(196:210,1:195),] # reording so global plalan is first
fdf<-data.frame(cri.f_reorder)
#binding
fdf2<-as.data.frame(
cbind(
(c(rownames(fdf)[1:15], rep(rownames(fdf)[1:15], each=length(locs)))), #stdarzing the parameter  names
as.numeric(as.character(fdf$mean)),  # the estimate
as.numeric(as.character(fdf$X2.5.)), #lower bound, 95% CI
as.numeric(as.character(fdf$X97.5.)),  #upper bound, 95% CI
as.numeric(c(rep(1, 15), rep(2, (nrow(fdf)-15)))),  # A variable to signify if the corresponding row is global PLALAN or random loc. 1=global PLALAN, 2=rndm loc
as.numeric( c( rep(0,15), c(rep(c(locs),15 )))))) #loc variable. Zero when a global
names(fdf2)<-c("var", "Estimate", colnames(cri.f)[c(2,3)], "rndm", "loc") #renaming.
fdf2$Estimate<-as.numeric(fdf2$Estimate)
fdf2$`2.5%`<-as.numeric(fdf2$`2.5%`)
fdf2$`97.5%`<-as.numeric(fdf2$`97.5%`)
#Global plalan estimates:
plalan<-c(rep(0, 15), rep(as.numeric(fdf2[c(1:15),"Estimate"]), each=length(locs)))
dff<-fdf2
#adding the fixef estiamtes to the random effect values:
dff$Estimate<-fdf2$Estimate+plalan
dff$`2.5%`<-fdf2$`2.5%`+plalan
dff$`97.5%`<-fdf2$`97.5%`+plalan
dff$var <- fct_inorder(dff$var) %>% fct_rev() #so that the categorical variables plot in the right order
dff$var2 <- rev(levels(dff$var))
dff$rndm <- fct_rev(dff$rndm)
dff<-dff[c(16:nrow(dff), 1:15),] # so that the main effects plot on top
pd <- position_dodge(width =  0.5)
var_names <-c("origin","strat","temp1" ,"temp2","temp3","origin × strat","origin × temp1","origin × temp2","origin × temp3",
"strat × temp1", "strat × temp2","strat × temp3","origin × strat × temp1", "origin × strat × temp2",
"origin × strat × temp3")
getPalette = colorRampPalette(brewer.pal(13, "Set1"))
locs_names<-loc_index[loc_index$loc %in% locs,]
locs_names<-locs_names[order(as.numeric(as.character(locs_names$loc))),]
locs_names$V1[5] <- "Europe--Just below Enzianhutte, \n above Zell Am See, Austria"
fig1<-ggplot(dff, aes(y=Estimate, x=var, color=factor(as.numeric(loc)), size=(rndm), alpha=(rndm)))+
geom_errorbar(aes(ymin=(`2.5%`), ymax=(`97.5%`)), position=pd, size=.8, width =0)+
geom_point(position =pd)+
geom_hline(yintercept=0)+
scale_colour_manual(labels =c("PLALAN global mean", locs_names$V1),
values=c("black", getPalette(13)))+
scale_size_discrete(range=c(4,6))+
scale_alpha_discrete(range=c(.5,1))+ #(values=c(rep(0.2,7), 1))+
guides(alpha=FALSE, size=FALSE) + #removes the legend
ggtitle(label = "a) Germination rate")+
scale_x_discrete(labels = var_names)+
labs(x="", y= "logit (fraction)")+
theme(legend.position = "none")+
theme_bw(12)+
theme(axis.text.x = element_blank())+
theme(plot.margin = unit(c(.1, .1, .1, .1), "cm"))+
theme(legend.title = element_blank())+
guides(color=FALSE)
fig1
## Germiantion date
# model data:
load("/home/harold/github/germination_stan/time_data.rdata")
data<-time_data
## PLALAN is species 4,
# locations for PLALAN:
locs<-time_data[time_data$sp==4 ,"loc"] %>% unique() %>% sort()
# location index:
load("/home/harold/github/germination_stan/germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs, germinated==1 & sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
loc<-as.numeric(as.factor(germs.y$loc))
loc_index <- cbind(data$loc, loc) %>% as.data.frame() %>% unique()
pars_append<-list()
for (i in locs){
pars <- c(paste("b[origin loc:sp:",i,":4]", sep=""),
paste("b[strat loc:sp:",i,":4]", sep=""),
paste("b[temp1 loc:sp:",i,":4]", sep=""),
paste("b[temp2 loc:sp:",i,":4]", sep=""),
paste("b[temp3 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat loc:sp:",i,":4]", sep=""),
paste("b[origin:temp1 loc:sp:",i,":4]", sep=""),
paste("b[origin:temp2 loc:sp:",i,":4]", sep=""),
paste("b[origin:temp3 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp1 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp2 loc:sp:",i,":4]", sep=""),
paste("b[strat:temp3 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp1 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp2 loc:sp:",i,":4]", sep=""),
paste("b[origin:strat:temp3 loc:sp:",i,":4]", sep="")
)
pars_append<-(c(pars_append,pars))
print(i)
}
m<-mod_time_pois
# This is an Rstanarm object. The coeffs have to be extracted.  There's probably a better way to do this,
#but I already had this code written up for something else, so used it again.
sum.m <-
summary(probs=c(0.025,0.975),
m,
pars = c(
"b[origin sp:4]",
"b[strat sp:4]",
"b[temp1 sp:4]",
"b[temp2 sp:4]",
"b[temp3 sp:4]",
"b[origin:strat sp:4]",
"b[origin:temp1 sp:4]",
"b[origin:temp2 sp:4]",
"b[origin:temp3 sp:4]",
"b[strat:temp1 sp:4]",
"b[strat:temp2 sp:4]",
"b[strat:temp3 sp:4]",
"b[origin:strat:temp1 sp:4]",
"b[origin:strat:temp2 sp:4]",
"b[origin:strat:temp3 sp:4]"
,
pars_append
)
)
cri.f<-sum.m[,c(1,4,5)] #just selecting the mean and 95% CI.
cri.f_reorder<-cri.f[c(196:210,1:195),] # reording so global plalan is first
fdf<-data.frame(cri.f_reorder)
#binding
fdf2<-as.data.frame(
cbind(
(c(rownames(fdf)[1:15], rep(rownames(fdf)[1:15], each=length(locs)))), #stdarzing the parameter  names
as.numeric(as.character(fdf$mean)),  # the estimate
as.numeric(as.character(fdf$X2.5.)), #lower bound, 95% CI
as.numeric(as.character(fdf$X97.5.)),  #upper bound, 95% CI
as.numeric(c(rep(1, 15), rep(2, (nrow(fdf)-15)))),  # A variable to signify if the corresponding row is global PLALAN or random loc. 1=global PLALAN, 2=rndm loc
as.numeric( c( rep(0,15), c(rep(c(locs),15 )))))) #loc variable. Zero when a global
names(fdf2)<-c("var", "Estimate", colnames(cri.f)[c(2,3)], "rndm", "loc") #renaming.
fdf2$Estimate<-as.numeric(fdf2$Estimate)
fdf2$`2.5%`<-as.numeric(fdf2$`2.5%`)
fdf2$`97.5%`<-as.numeric(fdf2$`97.5%`)
#Global plalan  estimates:
plalan<-c(rep(0, 15), rep(as.numeric(fdf2[c(1:15),"Estimate"]), each=length(locs)))
dff<-fdf2
#adding the fixef estiamtes to the random effect values:
dff$Estimate<-fdf2$Estimate+plalan
dff$`2.5%`<-fdf2$`2.5%`+plalan
dff$`97.5%`<-fdf2$`97.5%`+plalan
dff$var <- fct_inorder(dff$var) %>% fct_rev() #so that the categorical variables plot in the right order
dff$var2 <- rev(levels(dff$var))
dff$rndm <- fct_rev(dff$rndm)
dff<-dff[c(16:nrow(dff), 1:15),] # so that the main effects plot on top
## plotting
pd <- position_dodge(width =  0.5)
var_names <-c("origin","strat","temp1" ,"temp2","temp3","origin × strat","origin × temp1","origin × temp2","origin × temp3",
"strat × temp1", "strat × temp2","strat × temp3","origin × strat × temp1", "origin × strat × temp2",
"origin × strat × temp3")
getPalette = colorRampPalette(brewer.pal(13, "Set1"))
locs_names<-loc_index[loc_index$loc %in% locs,]
locs_names<-locs_names[order(as.numeric(as.character(locs_names$loc))),]
locs_names$V1[5] <- "Europe--Just below Enzianhutte, \n above Zell Am See, Austria"
fig2<-ggplot(dff, aes(y=Estimate, x=var, color=factor(as.numeric(loc)), size=(rndm), alpha=(rndm)))+
geom_errorbar(aes(ymin=(`2.5%`), ymax=(`97.5%`)), position=pd, size=.8, width =0)+
geom_point(position =pd)+
geom_hline(yintercept=0)+
scale_colour_manual(labels =c("PLALAN global mean", locs_names$V1),
values=c("black", getPalette(13)))+
scale_size_discrete(range=c(4,6))+
scale_alpha_discrete(range=c(.5,1))+ #(values=c(rep(0.2,7), 1))+
guides(alpha=FALSE, size=FALSE) + #removes the legend
ggtitle(label = "b) Germination timing")+
scale_x_discrete(labels = var_names)+
labs(x="", y= "log (days)")+
theme(legend.position = "none")+
theme_bw(12)+
theme(axis.text.x = element_blank())+
theme(plot.margin = unit(c(.1, .1, .1, .1), "cm"))+
theme(legend.title = element_blank())+
guides(color=FALSE)
####################
## GROWTH RATE #####
####################
## PLALAN is species 4,
sp_num<-4
#model:
m<-mod_gr
# model data:
load("/home/harold/github/germination_stan/datax.rdata")
data<-datax
# locations for PLALAN:
locs<-data[data$sp==sp_num ,"loc"] %>% unique() %>% sort()
# location index:
germs.y<-(subset(germs, germinated==1 & sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
loc<-as.numeric(as.factor(germs.y$loc))
loc_index <- cbind(germs.y$loc, loc) %>% as.data.frame() %>% unique()
pars_append<-list()
for (i in locs){
pars <- c(paste("b[origin loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[strat loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[temp1 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[temp2 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[temp3 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:strat loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:temp1 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:temp2 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:temp3 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[strat:temp1 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[strat:temp2 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[strat:temp3 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:strat:temp1 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:strat:temp2 loc:sp:",i,":",sp_num,"]", sep=""),
paste("b[origin:strat:temp3 loc:sp:",i,":",sp_num,"]", sep="")
)
pars_append<-(c(pars_append,pars))
}
# This is an Rstanarm object. The coeffs have to be extracted.  There's probably a better way to do this,
#but I already had this code written up for something else, so used it again.
sum.m <-
summary(probs=c(0.025,0.975),
m,
pars = c(
paste("b[origin sp:",sp_num,"]",sep=""),
paste("b[strat sp:",sp_num,"]",sep=""),
paste("b[temp1 sp:",sp_num,"]",sep=""),
paste("b[temp2 sp:",sp_num,"]",sep=""),
paste("b[temp3 sp:",sp_num,"]",sep=""),
paste("b[origin:strat sp:",sp_num,"]",sep=""),
paste("b[origin:temp1 sp:",sp_num,"]",sep=""),
paste("b[origin:temp2 sp:",sp_num,"]",sep=""),
paste("b[origin:temp3 sp:",sp_num,"]",sep=""),
paste("b[strat:temp1 sp:",sp_num,"]",sep=""),
paste("b[strat:temp2 sp:",sp_num,"]",sep=""),
paste("b[strat:temp3 sp:",sp_num,"]",sep=""),
paste("b[origin:strat:temp1 sp:",sp_num,"]",sep=""),
paste("b[origin:strat:temp2 sp:",sp_num,"]",sep=""),
paste("b[origin:strat:temp3 sp:",sp_num,"]",sep="")
,
pars_append
)
)
cri.f<-sum.m[,c(1,4,5)] #just selecting the mean and 95% CI.
cri.f_reorder<-cri.f[c(196:210,1:195),] # reording so global plalan is first
fdf<-data.frame(cri.f_reorder)
#cri.f_reorder<-cri.f[c(nrow(cri.f)-14:nrow(cri.f),1:(nrow(cri.f)-15)),] # reording so global plalan is first
fdf<-data.frame(cri.f_reorder)
#binding
fdf2<-as.data.frame(
cbind(
(c(rownames(fdf)[1:15], rep(rownames(fdf)[1:15], each=length(locs)))), #stdarzing the parameter  names
as.numeric(as.character(fdf$mean)),  # the estimate
as.numeric(as.character(fdf$X2.5.)), #lower bound, 95% CI
as.numeric(as.character(fdf$X97.5.)),  #upper bound, 95% CI
as.numeric(c(rep(1, 15), rep(2, (nrow(fdf)-15)))),  # A variable to signify if the corresponding row is global PLALAN or random loc. 1=global PLALAN, 2=rndm loc
as.numeric( c( rep(0,15), c(rep(c(locs),15 )))))) #loc variable. Zero when a global
names(fdf2)<-c("var", "Estimate", colnames(cri.f)[c(2,3)], "rndm", "loc") #renaming.
fdf2$Estimate<-as.numeric(fdf2$Estimate)
fdf2$`2.5%`<-as.numeric(fdf2$`2.5%`)
fdf2$`97.5%`<-as.numeric(fdf2$`97.5%`)
#Global plalan effect estimates:
plalan<-c(rep(0, 15), rep(as.numeric(fdf2[c(1:15),"Estimate"]), each=length(locs)))
dff<-fdf2
#adding the fixef estiamtes to the random effect values:
dff$Estimate<-fdf2$Estimate+plalan
dff$`2.5%`<-fdf2$`2.5%`+plalan
dff$`97.5%`<-fdf2$`97.5%`+plalan
dff$var <- fct_inorder(dff$var) %>% fct_rev() #so that the categorical variables plot in the right order
dff$var2 <- rev(levels(dff$var))
dff$rndm <- fct_rev(dff$rndm)
dff<-dff[c(16:nrow(dff), 1:15),] # so that the main effects plot on top
## plotting
pd <- position_dodge(width =  0.5)
var_names <-c("origin","strat","temp1" ,"temp2","temp3","origin × strat","origin × temp1","origin × temp2","origin × temp3",
"strat × temp1", "strat × temp2","strat × temp3","origin × strat × temp1", "origin × strat × temp2",
"origin × strat × temp3")
getPalette = colorRampPalette(brewer.pal(13, "Set1"))
locs_names<-loc_index[loc_index$loc %in% locs,]
locs_names<-locs_names[order(as.numeric(as.character(locs_names$loc))),]
locs_names$short <-c("N. France", "Denmark", "S. Slovenia", "S. France", "Austria (high altitude)", "Switzerland",
"Germany", "N. Slovenia", "Liechtenstein", "Netherlands", "Austria (low altitude)",
"USA--Boston", "USA--Concord")
fig3<-ggplot(dff, aes(y=Estimate, x=var, color=factor(as.numeric(loc)), size=(rndm), alpha=(rndm)))+
geom_errorbar(aes(ymin=(`2.5%`), ymax=(`97.5%`)), position=pd, size=.8, width =0)+
geom_point(position =pd)+
geom_hline(yintercept=0)+
scale_colour_manual( labels = c("PLALAN_global", locs_names$short),
values=c("black", getPalette(13)))+
scale_size_discrete(range=c(4,6))+
scale_alpha_discrete(range=c(.5,1))+ #(values=c(rep(0.2,7), 1))+
guides(alpha=FALSE, size=FALSE) + #removes the legend
ggtitle(label = "c) Growth rate")+
scale_x_discrete(labels = var_names)+
labs(x="", y= "cm/day")+
theme(legend.position = "none")+
theme_bw(12)+
theme(axis.text.x = element_text(angle = 60, hjust=1, vjust=.9))+
theme(plot.margin = unit(c(.1, .1, .1, .1), "cm"))+
theme(legend.title = element_blank())
#guides(color=FALSE)
fig3n<-fig3 + theme(legend.position ="none")
grid<-  plot_grid(fig1, fig2, fig3n, nrow=3, rel_heights = c(1,1,1.5), axis='l', align='v')
#extract legend
legend <- get_legend(
# create some space to the left of the legend
#  fig2+ guides(color = guide_legend(nrow = 1)) +
#   theme(legend.position = "bottom")
fig3 + theme(legend.box.margin = margin(12, 0, 0, 12))
)
final  <- plot_grid(grid, legend, ncol=2, rel_widths = c(3,.8), axis='t', align="h")
ggsave("PLALAN_pops_plot.svg",final, device = "svg",width = 10, height=11, units="in")
